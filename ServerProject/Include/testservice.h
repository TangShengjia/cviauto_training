/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __TESTSERVICE_H__
#define __TESTSERVICE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.example.ITestService */

#define TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE (test_service_org_example_itest_service_get_type ())
#define TEST_SERVICE_ORG_EXAMPLE_ITEST_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE, TestServiceOrgExampleITestService))
#define TEST_SERVICE_IS_ORG_EXAMPLE_ITEST_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE))
#define TEST_SERVICE_ORG_EXAMPLE_ITEST_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE, TestServiceOrgExampleITestServiceIface))

struct _TestServiceOrgExampleITestService;
typedef struct _TestServiceOrgExampleITestService TestServiceOrgExampleITestService;
typedef struct _TestServiceOrgExampleITestServiceIface TestServiceOrgExampleITestServiceIface;

struct _TestServiceOrgExampleITestServiceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_test_bool) (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_test_double) (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_test_info) (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_test_int) (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_test_string) (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_test_bool) (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_param);

  gboolean (*handle_set_test_double) (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    gdouble arg_param);

  gboolean (*handle_set_test_info) (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_params);

  gboolean (*handle_set_test_int) (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    gint arg_param);

  gboolean (*handle_set_test_string) (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_param);

  void (*on_test_bool_changed) (
    TestServiceOrgExampleITestService *object,
    gboolean arg_param);

  void (*on_test_double_changed) (
    TestServiceOrgExampleITestService *object,
    gdouble arg_param);

  void (*on_test_info_changed) (
    TestServiceOrgExampleITestService *object,
    GVariant *arg_param);

  void (*on_test_int_changed) (
    TestServiceOrgExampleITestService *object,
    gint arg_param);

  void (*on_test_string_changed) (
    TestServiceOrgExampleITestService *object,
    const gchar *arg_param);

};

GType test_service_org_example_itest_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *test_service_org_example_itest_service_interface_info (void);
guint test_service_org_example_itest_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void test_service_org_example_itest_service_complete_set_test_bool (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void test_service_org_example_itest_service_complete_set_test_int (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void test_service_org_example_itest_service_complete_set_test_double (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void test_service_org_example_itest_service_complete_set_test_string (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void test_service_org_example_itest_service_complete_set_test_info (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void test_service_org_example_itest_service_complete_get_test_bool (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void test_service_org_example_itest_service_complete_get_test_int (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    gint result);

void test_service_org_example_itest_service_complete_get_test_double (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    gdouble result);

void test_service_org_example_itest_service_complete_get_test_string (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void test_service_org_example_itest_service_complete_get_test_info (
    TestServiceOrgExampleITestService *object,
    GDBusMethodInvocation *invocation,
    GVariant *result);



/* D-Bus signal emissions functions: */
void test_service_org_example_itest_service_emit_on_test_bool_changed (
    TestServiceOrgExampleITestService *object,
    gboolean arg_param);

void test_service_org_example_itest_service_emit_on_test_int_changed (
    TestServiceOrgExampleITestService *object,
    gint arg_param);

void test_service_org_example_itest_service_emit_on_test_double_changed (
    TestServiceOrgExampleITestService *object,
    gdouble arg_param);

void test_service_org_example_itest_service_emit_on_test_string_changed (
    TestServiceOrgExampleITestService *object,
    const gchar *arg_param);

void test_service_org_example_itest_service_emit_on_test_info_changed (
    TestServiceOrgExampleITestService *object,
    GVariant *arg_param);



/* D-Bus method calls: */
void test_service_org_example_itest_service_call_set_test_bool (
    TestServiceOrgExampleITestService *proxy,
    gboolean arg_param,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean test_service_org_example_itest_service_call_set_test_bool_finish (
    TestServiceOrgExampleITestService *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean test_service_org_example_itest_service_call_set_test_bool_sync (
    TestServiceOrgExampleITestService *proxy,
    gboolean arg_param,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void test_service_org_example_itest_service_call_set_test_int (
    TestServiceOrgExampleITestService *proxy,
    gint arg_param,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean test_service_org_example_itest_service_call_set_test_int_finish (
    TestServiceOrgExampleITestService *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean test_service_org_example_itest_service_call_set_test_int_sync (
    TestServiceOrgExampleITestService *proxy,
    gint arg_param,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void test_service_org_example_itest_service_call_set_test_double (
    TestServiceOrgExampleITestService *proxy,
    gdouble arg_param,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean test_service_org_example_itest_service_call_set_test_double_finish (
    TestServiceOrgExampleITestService *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean test_service_org_example_itest_service_call_set_test_double_sync (
    TestServiceOrgExampleITestService *proxy,
    gdouble arg_param,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void test_service_org_example_itest_service_call_set_test_string (
    TestServiceOrgExampleITestService *proxy,
    const gchar *arg_param,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean test_service_org_example_itest_service_call_set_test_string_finish (
    TestServiceOrgExampleITestService *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean test_service_org_example_itest_service_call_set_test_string_sync (
    TestServiceOrgExampleITestService *proxy,
    const gchar *arg_param,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void test_service_org_example_itest_service_call_set_test_info (
    TestServiceOrgExampleITestService *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean test_service_org_example_itest_service_call_set_test_info_finish (
    TestServiceOrgExampleITestService *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean test_service_org_example_itest_service_call_set_test_info_sync (
    TestServiceOrgExampleITestService *proxy,
    GVariant *arg_params,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void test_service_org_example_itest_service_call_get_test_bool (
    TestServiceOrgExampleITestService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean test_service_org_example_itest_service_call_get_test_bool_finish (
    TestServiceOrgExampleITestService *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean test_service_org_example_itest_service_call_get_test_bool_sync (
    TestServiceOrgExampleITestService *proxy,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void test_service_org_example_itest_service_call_get_test_int (
    TestServiceOrgExampleITestService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean test_service_org_example_itest_service_call_get_test_int_finish (
    TestServiceOrgExampleITestService *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean test_service_org_example_itest_service_call_get_test_int_sync (
    TestServiceOrgExampleITestService *proxy,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void test_service_org_example_itest_service_call_get_test_double (
    TestServiceOrgExampleITestService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean test_service_org_example_itest_service_call_get_test_double_finish (
    TestServiceOrgExampleITestService *proxy,
    gdouble *out_result,
    GAsyncResult *res,
    GError **error);

gboolean test_service_org_example_itest_service_call_get_test_double_sync (
    TestServiceOrgExampleITestService *proxy,
    gdouble *out_result,
    GCancellable *cancellable,
    GError **error);

void test_service_org_example_itest_service_call_get_test_string (
    TestServiceOrgExampleITestService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean test_service_org_example_itest_service_call_get_test_string_finish (
    TestServiceOrgExampleITestService *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean test_service_org_example_itest_service_call_get_test_string_sync (
    TestServiceOrgExampleITestService *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void test_service_org_example_itest_service_call_get_test_info (
    TestServiceOrgExampleITestService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean test_service_org_example_itest_service_call_get_test_info_finish (
    TestServiceOrgExampleITestService *proxy,
    GVariant **out_result,
    GAsyncResult *res,
    GError **error);

gboolean test_service_org_example_itest_service_call_get_test_info_sync (
    TestServiceOrgExampleITestService *proxy,
    GVariant **out_result,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE_PROXY (test_service_org_example_itest_service_proxy_get_type ())
#define TEST_SERVICE_ORG_EXAMPLE_ITEST_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE_PROXY, TestServiceOrgExampleITestServiceProxy))
#define TEST_SERVICE_ORG_EXAMPLE_ITEST_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE_PROXY, TestServiceOrgExampleITestServiceProxyClass))
#define TEST_SERVICE_ORG_EXAMPLE_ITEST_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE_PROXY, TestServiceOrgExampleITestServiceProxyClass))
#define TEST_SERVICE_IS_ORG_EXAMPLE_ITEST_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE_PROXY))
#define TEST_SERVICE_IS_ORG_EXAMPLE_ITEST_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE_PROXY))

typedef struct _TestServiceOrgExampleITestServiceProxy TestServiceOrgExampleITestServiceProxy;
typedef struct _TestServiceOrgExampleITestServiceProxyClass TestServiceOrgExampleITestServiceProxyClass;
typedef struct _TestServiceOrgExampleITestServiceProxyPrivate TestServiceOrgExampleITestServiceProxyPrivate;

struct _TestServiceOrgExampleITestServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  TestServiceOrgExampleITestServiceProxyPrivate *priv;
};

struct _TestServiceOrgExampleITestServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType test_service_org_example_itest_service_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TestServiceOrgExampleITestServiceProxy, g_object_unref)
#endif

void test_service_org_example_itest_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
TestServiceOrgExampleITestService *test_service_org_example_itest_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
TestServiceOrgExampleITestService *test_service_org_example_itest_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void test_service_org_example_itest_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
TestServiceOrgExampleITestService *test_service_org_example_itest_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
TestServiceOrgExampleITestService *test_service_org_example_itest_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE_SKELETON (test_service_org_example_itest_service_skeleton_get_type ())
#define TEST_SERVICE_ORG_EXAMPLE_ITEST_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE_SKELETON, TestServiceOrgExampleITestServiceSkeleton))
#define TEST_SERVICE_ORG_EXAMPLE_ITEST_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE_SKELETON, TestServiceOrgExampleITestServiceSkeletonClass))
#define TEST_SERVICE_ORG_EXAMPLE_ITEST_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE_SKELETON, TestServiceOrgExampleITestServiceSkeletonClass))
#define TEST_SERVICE_IS_ORG_EXAMPLE_ITEST_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE_SKELETON))
#define TEST_SERVICE_IS_ORG_EXAMPLE_ITEST_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TEST_SERVICE_TYPE_ORG_EXAMPLE_ITEST_SERVICE_SKELETON))

typedef struct _TestServiceOrgExampleITestServiceSkeleton TestServiceOrgExampleITestServiceSkeleton;
typedef struct _TestServiceOrgExampleITestServiceSkeletonClass TestServiceOrgExampleITestServiceSkeletonClass;
typedef struct _TestServiceOrgExampleITestServiceSkeletonPrivate TestServiceOrgExampleITestServiceSkeletonPrivate;

struct _TestServiceOrgExampleITestServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  TestServiceOrgExampleITestServiceSkeletonPrivate *priv;
};

struct _TestServiceOrgExampleITestServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType test_service_org_example_itest_service_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TestServiceOrgExampleITestServiceSkeleton, g_object_unref)
#endif

TestServiceOrgExampleITestService *test_service_org_example_itest_service_skeleton_new (void);


G_END_DECLS

#endif /* __TESTSERVICE_H__ */
